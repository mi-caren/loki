
* dbuf_free -> check se buf != NULL


* Creare struct String
    struct FileLine {
        char* chars;
        int len;
    }

    Specifica per le linee di testo nel file aperto


* Creare struct EditorFile

    struct EditorFile {
        String lines;
        int numlines;
    }


* enum EditorError

    Far ritornare i valori alla funzione e poi avere una
    funzione che mappi questi status code in una stringa

    if (status = func() != OK)
        return status;

* Prima di salvare scrivere prima in un file di backup per evitare perdita di dati

* controllare in tutti i punti in cui c'è bisogno di gestire gli errori

* ctrl-d delete line

* mouse support

* ctrl-g
	go to line number

* ctrl-z
* ctrl-r

* render trailing spaces

* show modified and new lines by colouring line number

* quando si cerca, mostrare il numero di match trovati nella message bar

* control enter per creare una nuova riga sotto
* ctrl-shift enter

PROBLEMA -> * creare un editor key NO_OP, in caso non venga riconosciuta una escape sequence invece di ritornare semplicemente '\x1b', che ha n significato per l'edior

* fare in modo che le editor keys siano fatte in modo da confrontarle con delle flag per capire se c'è qualche modificatore premuto

* creare un enum per i colori:
	FG_BRIGHT_BLUE = 34 << 8
	BG_BRIGHt_BLUE = 104

* supportare utf-8: tipo la e accentata sono 2 bytes

* c'e' un problema con le linee troppo lunghe: non viene tagliata e wrappa nella riga successiva. vedi PROBLEMA

* basic hint che propone di completare con parole già presenti nel file

* highlight di file di tipo diverso dal c

* BUG:
    provare a selezionare una parte di testo partendo da destra e muovendosi veso sinistra
    premere backspace
    il testo selezionato non viene eliminato
